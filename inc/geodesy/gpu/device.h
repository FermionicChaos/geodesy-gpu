#ifndef GEODESY_GPU_DEVICE_H
#define GEODESY_GPU_DEVICE_H

#include "config.h"

namespace geodesy::gpu {

	class device  {
	public:

		// Device Memory Types
		enum memory : unsigned int {
			DEVICE_LOCAL 							= VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,
			HOST_VISIBLE 							= VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,
			HOST_COHERENT 							= VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
			HOST_CACHED 							= VK_MEMORY_PROPERTY_HOST_CACHED_BIT,
			LAZILY_ALLOCATED 						= VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT,
			// PROTECTED 								= VK_MEMORY_PROPERTY_PROTECTED_BIT,
			DEVICE_COHERENT 						= VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD,
			DEVICE_UNCACHED 						= VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD,
			RDMA_CAPABLE 							= VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV,
		};

		// Device Memory Access Types
		enum access : unsigned int {
			INDIRECT_COMMAND_READ 					= VK_ACCESS_INDIRECT_COMMAND_READ_BIT,
			INDEX_READ 								= VK_ACCESS_INDEX_READ_BIT,
			VERTEX_ATTRIBUTE_READ 					= VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT,
			UNIFORM_READ 							= VK_ACCESS_UNIFORM_READ_BIT,
			INPUT_ATTACHMENT_READ 					= VK_ACCESS_INPUT_ATTACHMENT_READ_BIT,
			SHADER_READ 							= VK_ACCESS_SHADER_READ_BIT,
			SHADER_WRITE 							= VK_ACCESS_SHADER_WRITE_BIT,
			COLOR_ATTACHMENT_READ 					= VK_ACCESS_COLOR_ATTACHMENT_READ_BIT,
			COLOR_ATTACHMENT_WRITE 					= VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT,
			DEPTH_STENCIL_ATTACHMENT_READ 			= VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT,
			DEPTH_STENCIL_ATTACHMENT_WRITE 			= VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT,
			TRANSFER_READ 							= VK_ACCESS_TRANSFER_READ_BIT,
			TRANSFER_WRITE 							= VK_ACCESS_TRANSFER_WRITE_BIT,
			HOST_READ 								= VK_ACCESS_HOST_READ_BIT,
			HOST_WRITE 								= VK_ACCESS_HOST_WRITE_BIT,
			MEMORY_READ 							= VK_ACCESS_MEMORY_READ_BIT,
			MEMORY_WRITE 							= VK_ACCESS_MEMORY_WRITE_BIT,
			NONE 									= VK_ACCESS_NONE,
			// TRANSFORM_FEEDBACK_WRITE_EXT 										= VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT,
			// TRANSFORM_FEEDBACK_COUNTER_READ_EXT 								= VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT,
			// TRANSFORM_FEEDBACK_COUNTER_WRITE_EXT 								= VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT,
			// CONDITIONAL_RENDERING_READ_EXT 										= VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT,
			// COLOR_ATTACHMENT_READ_NONCOHERENT_EXT 								= VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT,
			// ACCELERATION_STRUCTURE_READ_KHR 									= VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
			// ACCELERATION_STRUCTURE_WRITE_KHR 									= VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
			// FRAGMENT_DENSITY_MAP_READ_EXT 										= VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
			// FRAGMENT_SHADING_RATE_ATTACHMENT_READ_KHR 							= VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
			// COMMAND_PREPROCESS_READ_NV 											= VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV,
			// COMMAND_PREPROCESS_WRITE_NV 										= VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV,
			// SHADING_RATE_IMAGE_READ_NV 											= VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV,
			// ACCELERATION_STRUCTURE_READ_NV 										= VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV,
			// ACCELERATION_STRUCTURE_WRITE_NV 									= VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV,
			// NONE_KHR 															= VK_ACCESS_NONE_KHR,
		};

		// Device Executable Operations
		enum operation : unsigned int {
			GRAPHICS 								= VK_QUEUE_GRAPHICS_BIT,
			COMPUTE 								= VK_QUEUE_COMPUTE_BIT,
			TRANSFER 								= VK_QUEUE_TRANSFER_BIT,
			SPARSE_BINDING 							= VK_QUEUE_SPARSE_BINDING_BIT,
			// PROTECTED 								= VK_QUEUE_PROTECTED_BIT,
			VIDEO_DECODE 							= VK_QUEUE_VIDEO_DECODE_BIT_KHR,
			VIDEO_ENCODE 							= VK_QUEUE_VIDEO_ENCODE_BIT_KHR,
			OPTICAL_FLOW 							= VK_QUEUE_OPTICAL_FLOW_BIT_NV,
		};

		std::string 								Name;
		std::string 								Type;

		VkPhysicalDeviceProperties 					Properties;
		VkPhysicalDeviceMemoryProperties 			MemoryProperties;
		std::vector<VkQueueFamilyProperties> 		QueueFamilyProperties;
		VkPhysicalDeviceFeatures 					Features;
		VkPhysicalDevice 							Handle;

		device();
		device(instance* aInstance, VkPhysicalDevice aPhysicalDevice);
		~device();

		// Memory Stuff
		int get_memory_type_index(VkMemoryRequirements aMemoryRequirements, unsigned int aMemoryType) const;
		int get_memory_type(int aMemoryTypeIndex);

		// Execution Stuff
		std::vector<int> sort_queue_family_indices(unsigned int aDesiredOperations) const;

	};

}

#endif // !GEODESY_GPU_DEVICE_H